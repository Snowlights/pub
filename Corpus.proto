syntax = "proto3";

package corpus;

message ErrorInfo{
    sint64 ret = 1;
    string msg = 2;
}

enum LoginType{
    login_type = 0;
    e_mail = 1;
    code = 2;
}

enum UserType{
    user_type = 0;
    normal = 1;
    vip = 2;
}

message UserInfo{
    sint64 user_id = 1;
    string user_name = 2;
    string phone = 3;
    string e_mail = 4;
}

message LoginUserReq{
    string e_mail = 1;//方式两种 账号和短信
    string user_password = 2;
    string phone = 3;
    sint64 code = 4;
}
message LoginUserData{
    string cookie = 1;
}
message LoginUserRes{
    ErrorInfo errinfo = 1;
    LoginUserData data = 2;
}

message UpdateUserInfoReq{
    sint64 user_id = 1;
    string user_name = 2;
    string phone = 3; //更改电话
    string e_mail = 4; //更改邮箱
    string description = 5;
    string cookie = 6;
}
message UpdateUserInfoData{

}
message UpdateUserInfoRes{
    ErrorInfo errinfo = 1;
    UpdateUserInfoData data = 2;
}

message DelUserInfoReq{
    sint64 user_id = 1;
    string cookie = 2;
}
message DelUserInfoData{
}
message DelUserInfoRes{
    ErrorInfo errinfo = 1;
    DelUserInfoData data = 2;
}

message LogoutUserInfoReq{
    string cookie = 1;
}
message LogoutUserInfoData{
    bool is_success = 1;
}
message LogoutUserInfoRes{
    ErrorInfo errinfo = 1;
    LogoutUserInfoData data = 2;
}

message ListUserInfoReq{
    sint64 offset = 1;
    sint64 limit = 2;
    string e_mail = 3;
    string user_name = 4;
    string phone = 5;
    string cookie = 6;
}
message ListUserInfoData{
    repeated UserInfo items = 1;
    sint64 total = 2;
    sint64 offset = 3;
    bool more = 4 ;
}
message ListUserInfoRes{
    ErrorInfo errinfo = 1;
    ListUserInfoData data = 2;
}

enum AudioType{
    audio_type = 0;
    Mp3 = 1;
    ACC = 2;
    WAV = 3;
}

message Audio{
    sint64 audio_id = 1;
    string origin_audio = 2;
    string trans_audio = 3;
    AudioType audio_type = 4;
}

message AddTransAudioReq{
    string origin_audio = 1;
    string trans_audio = 2;
    string cookie = 3;
}
message AddTransAudioData{
}
message AddTransAudioRes{
     ErrorInfo errinfo = 1;
     AddTransAudioData data = 2;
}

message DelTransAudioReq{
    sint64 audio_id = 1;
    string cookie = 2;
}
message DelTransAudioData{
}
message DelTransAudioRes{
     ErrorInfo errinfo = 1;
     DelTransAudioData data = 2;
}

message ListTransAudioReq{
    sint64 offset = 1;
    sint64 limit = 2;
    AudioType audio_type = 3;
}
message ListTransAudioData{
    repeated Audio items = 1;
    sint64 total = 2;
    sint64 offset = 3;
    bool more = 4 ;
}
message ListTransAudioRes{
     ErrorInfo errinfo = 1;
     ListTransAudioData data = 2;
}

message KeyWord{
    string text = 1;
    float score = 2;
}

message GetKeyWordReq{
    string text = 1;
    string cookie = 2;
}
message GetKeyWordData{
    repeated KeyWord items = 1;
    sint64 total = 2;
}
message GetKeyWordRes{
     ErrorInfo errinfo = 1;
     GetKeyWordData data = 2;
}

message Word{
    string content = 1;
    float score = 2;
}
message EvaluationReq{
    string audio = 1;
    string text = 2;
    string cookie = 3;
}
message EvaluationData{
    repeated Word items = 1;
    sint64 total_number = 2;
    sint64 total_score = 3;
}
message EvaluationRes{
     ErrorInfo errinfo = 1;
     EvaluationData data = 2;
}

message RecognizeImageReq{
    string file = 1;
    string cookie = 2;
}
message RecognizeImageData{
    string text = 1;
}
message RecognizeImageRes{
     ErrorInfo errinfo = 1;
     RecognizeImageData data = 2;
}

enum AgeType{
    middle = 0; // 12-40
    child = 2; // <12
    old = 3; // >40
}

message RecognizeAgeReq{
    string audio = 1;
    string cookie = 2;
}
message RecognizeAgeData{
    string age_child = 1;
    string age_middle = 2;
    string age_old = 3;
    string gender = 4;
    string gender_male = 5;
    string gender_female = 6;
}
message RecognizeAgeRes{
     ErrorInfo errinfo = 1;
     RecognizeAgeData data = 2;
}

message TransAudioToTextReq{
    string audio = 1;
    string cookie = 2;
}
message TransAudioToTextData{
    string text = 1;
}
message TransAudioToTextRes{
     ErrorInfo errinfo = 1;
     TransAudioToTextData data = 2;
}


 //自己的服务名称首字母大写
service CorpusService {
    //该行下的接口正式使用
    //用户相关
    rpc LoginUser(LoginUserReq) returns (LoginUserRes);
    rpc LogoutUserInfo(LogoutUserInfoReq) returns (LogoutUserInfoRes);
    rpc UpdateUserInfo(UpdateUserInfoReq) returns (UpdateUserInfoRes);
    rpc DelUserInfo(DelUserInfoReq) returns (DelUserInfoRes);
    rpc ListUserInfo(ListUserInfoReq) returns (ListUserInfoRes);
    //转码
    rpc AddTransAudio(AddTransAudioReq) returns (AddTransAudioRes);
    rpc DelTransAudio(DelTransAudioReq) returns (DelTransAudioRes);
    rpc ListTransAudio(ListTransAudioReq) returns (ListTransAudioRes);
    //关键字
    rpc GetKeyWord(GetKeyWordReq) returns (GetKeyWordRes);
    //打分
    rpc Evaluation(EvaluationReq) returns (EvaluationRes);
    //手写文字识别和语音转文本
    rpc RecognizeImage(RecognizeImageReq) returns (RecognizeImageRes);
    rpc TransAudioToText(TransAudioToTextReq) returns (TransAudioToTextRes);
    //年龄识别
    rpc RecognizeAge(RecognizeAgeReq) returns (RecognizeAgeRes);
}
